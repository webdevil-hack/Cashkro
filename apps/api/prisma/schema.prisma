generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  COMPLETED
  REJECTED
}

enum ReferralStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id              String             @id @default(cuid())
  email           String             @unique
  passwordHash    String
  name            String?
  isAdmin         Boolean            @default(false)
  referralCode    String             @unique
  referredById    String?
  referredBy      User?              @relation("UserReferrals", fields: [referredById], references: [id])
  referrals       User[]             @relation("UserReferrals")
  clicks          Click[]
  transactions    Transaction[]
  withdrawals     WalletWithdrawal[]
  referralBonuses ReferralBonus[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model Merchant {
  id         String      @id @default(cuid())
  name       String
  logoUrl    String?
  websiteUrl String
  isActive   Boolean     @default(true)
  offers     Offer[]
  clicks     Click[]
  transactions Transaction[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Offer {
  id                    String      @id @default(cuid())
  merchantId            String
  merchant              Merchant    @relation(fields: [merchantId], references: [id])
  title                 String
  description           String?
  baseCashbackRate      Float
  affiliateUrlTemplate  String
  clickIdParam          String      @default("ck_click_id")
  isActive              Boolean     @default(true)
  clicks                Click[]
  transactions          Transaction[]
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model Click {
  id             String     @id @default(cuid())
  clickId        String     @unique
  userId         String?
  user           User?      @relation(fields: [userId], references: [id])
  offerId        String
  offer          Offer      @relation(fields: [offerId], references: [id])
  merchantId     String
  merchant       Merchant   @relation(fields: [merchantId], references: [id])
  ip             String?
  userAgent      String?
  redirectUrlUsed String?
  createdAt      DateTime   @default(now())
  transactions   Transaction[]
}

model Transaction {
  id                   String             @id @default(cuid())
  networkTransactionId String?            @unique
  clickId              String?
  click                Click?             @relation(fields: [clickId], references: [clickId])
  userId               String?
  user                 User?              @relation(fields: [userId], references: [id])
  merchantId           String
  merchant             Merchant           @relation(fields: [merchantId], references: [id])
  offerId              String?
  offer                Offer?             @relation(fields: [offerId], references: [id])
  amount               Decimal?           @db.Decimal(10, 2)
  cashbackAmount       Decimal?           @db.Decimal(10, 2)
  status               TransactionStatus  @default(PENDING)
  eventAt              DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model WalletWithdrawal {
  id          String            @id @default(cuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  amount      Decimal           @db.Decimal(10, 2)
  status      WithdrawalStatus  @default(PENDING)
  method      String?
  details     Json?
  requestedAt DateTime          @default(now())
  processedAt DateTime?
}

model ReferralBonus {
  id               String          @id @default(cuid())
  userId           String
  user             User            @relation(fields: [userId], references: [id])
  referredUserId   String?
  amount           Decimal         @db.Decimal(10, 2)
  status           ReferralStatus  @default(PENDING)
  createdAt        DateTime        @default(now())
}
